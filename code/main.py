import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import database, keyboard, payment, config
from datetime import datetime

bot = Bot(token=config.TOKEN_BOT, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
db = database.Database("/data/database.db")

class post_setting(StatesGroup):
	file = State()
	description = State()
	date = State()
	time = State()
	confirm_sending = State()
	additionally = State()
	
class interaction_posts(StatesGroup):
	action = State()
	action_post = State()
	
class tariff(StatesGroup):
	chosen_tariff = State()
	check_payment = State()
	
class support(StatesGroup):
	action = State()
	request = State()
	answer = State()

class giving_posts(StatesGroup):
	id = State()
	number_posts = State()

class mailing_setting(StatesGroup):
	message = State()
	confirm = State()

class checking_menu(StatesGroup):
	action = State()
	action_for_post = State()
	confirm_input_cause = State()
	cause = State()
	
	
@dp.message_handler(commands=["start"], state="*")
async def cmd_start_handler(message: Message, state: FSMContext) -> None:
	await state.finish()
	menu_message = await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –≤–∞—à <b>–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üìÇ\n\n–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, <b>–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é</b> –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ üõ†\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚öô', reply_markup=keyboard.main_menu())
	have_user = await db.have_user(message.from_user.id)
	if have_user:
		# await db.change_value_posts_user(message.from_user.id, 10)
		await db.change_value_menu_id_user(message.from_user.id, menu_message.message_id)
	else:
		await db.add_user(message.from_user.id, menu_message.message_id, posts=1)

@dp.message_handler(commands=['get_admin_menu'], state='*')
async def get_admin_menu(message: Message, state: FSMContext):
	if message.from_user.id == config.ADMIN_ID:
		await state.finish()
		await message.answer(
			text='–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å <b>–≤—ã–¥–∞–Ω–∞!</b>',
			reply_markup=keyboard.admin_menu()
		)
		return
	await message.delete()

@dp.callback_query_handler(text='checking_posts')
async def checking_posts(call: CallbackQuery, state: FSMContext):
	posts = await db.all_posts_check()
	if not posts:
		await call.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ—Ç!', show_alert=True)
		return
	await call.message.edit_text(
		'–ü–æ—Å—Ç—ã:',
		reply_markup=keyboard.check_posts_menu(posts, 2)
	)
	await state.set_state(checking_menu.action)

@dp.callback_query_handler(text='delete_message', state='*')
async def delete_message(call: CallbackQuery):
	await call.message.delete()

@dp.callback_query_handler(state=checking_menu.action)
async def action_for_checking_menu(call: CallbackQuery, state: FSMContext):
	posts = await db.all_posts_check()
	if call.data.startswith('post_id'):
		await call.message.delete()
		id = int(call.data[8:])
		for post in posts:
			if post[0] == id:
				user_post = post
				break

		text = f"–≠—Ç–æ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <a href=\"tg://user?id={user_post[1]}\">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a></b> üìÉ\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{user_post[5]}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{user_post[6]}</b> ‚è∞"
		if user_post[3] == 'photo':
			post = await bot.send_photo(
				chat_id=call.from_user.id,
				photo=user_post[2],
				caption=user_post[4]
			)
		elif user_post[3] == 'video':
			post = await bot.send_video(
				chat_id=call.from_user.id,
				video=user_post[2],
				caption=user_post[4]
			)
		await state.update_data(id=user_post[0])
		await state.update_data(message_id=post.message_id)
		await state.update_data(user_id=user_post[1])
		await call.message.answer(
			text,
			reply_markup=keyboard.action_for_post_menu()
		)
		await state.set_state(checking_menu.action_for_post)
	elif call.data.startswith('post_previous') or call.data.startswith('post_next'):
		count = int(call.data.split('_')[3])
		index = 6 * count
		if index < 0:
			await call.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥! –¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚ùå")
			return
		if not posts[index:]:
			await call.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢")
			return

		if call.data.startswith('post_previous'):
			change = 1
		else:
			change = 0

		await call.message.edit_text('–ü–æ—Å—Ç—ã:', reply_markup=keyboard.check_posts_menu(posts[index:], change))

@dp.callback_query_handler(state=checking_menu.action_for_post)
async def action_for_post(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	await bot.delete_message(call.from_user.id, data.get('message_id'))
	if call.data == 'true':
		await db.change_status_post(data.get('id'), 'send')
		text = '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!'
		kb = keyboard.admin_menu()
		await bot.send_message(
			chat_id=data.get('user_id'),
			text='–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ <b><u>–ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</u></b> ‚úÖ',
			reply_markup=keyboard.delete_message_menu()
		)
		await state.finish()
	elif call.data == 'false':
		await db.change_value_posts_user(data.get('user_id'), 1)
		await db.change_status_post(data.get('id'))
		text = '–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É?'
		kb = keyboard.cause_menu()
		await state.set_state(checking_menu.confirm_input_cause)


	await call.message.edit_text(
		text=text,
		reply_markup=kb
	)


@dp.callback_query_handler(state=checking_menu.confirm_input_cause)
async def confirm_input_cause(call: CallbackQuery, state: FSMContext):
	if call.data == 'input_cause':
		await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:')
		await state.set_state(checking_menu.cause)
	elif call.data == 'no_cause':
		data = await state.get_data()
		text = '–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ <b><u>–æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</u></b> ‚ùå\n\n–ü—Ä–∏—á–∏–Ω–∞: <i>–ù–µ —É–∫–∞–∑–∞–Ω–∞</i> ü§î'
		await bot.send_message(
			chat_id=data.get('user_id'),
			text=text,
			reply_markup=keyboard.delete_message_menu()
		)
		await call.message.edit_text(
			'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å <b>–≤—ã–¥–∞–Ω–∞!</b>',
			reply_markup=keyboard.admin_menu()
		)

@dp.message_handler(state=checking_menu.cause)
async def cause_chosen(message: Message, state: FSMContext):
	data = await state.get_data()
	text = f'–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ <b><u>–æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</u></b> ‚ùå\n\n–ü—Ä–∏—á–∏–Ω–∞: <i>{message.text}</i> ü§î'
	await bot.send_message(
		chat_id=data.get('user_id'),
		text=text,
		reply_markup=keyboard.delete_message_menu()
	)
	await message.answer(
		'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å <b>–≤—ã–¥–∞–Ω–∞!</b>',
		reply_markup=keyboard.admin_menu()
	)
	await state.finish()

@dp.callback_query_handler(text='give_posts')
async def give_posts(call: CallbackQuery, state: FSMContext):
	await call.message.edit_text(
		'–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
		reply_markup=keyboard.return_admin_menu()
	)
	await state.set_state(giving_posts.id)

@dp.message_handler(state=giving_posts.id)
async def id_chosen(message: Message, state: FSMContext):
	if message.text.isdigit():
		await state.update_data(id=int(message.text))
		await message.answer(
			'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏:',
			reply_markup=keyboard.return_admin_menu()
		)
		await state.set_state(giving_posts.number_posts)
	else:
		await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!', reply_markup=keyboard.return_admin_menu())


@dp.message_handler(state=giving_posts.number_posts)
async def number_posts_chosen(message: Message, state: FSMContext):
	if message.text.isdigit():
		await state.update_data(posts=int(message.text))
		data = await state.get_data()
		user = await db.info_user(data.get('id'))
		await state.finish()
		if user:
			await db.change_value_posts_user(data.get('id'), data.get('posts'))
			await message.answer('–ü–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
		else:
			await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
		await message.answer(
			text='–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å <b>–≤—ã–¥–∞–Ω–∞!</b>',
			reply_markup=keyboard.admin_menu()
		)
	else:
		await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!', reply_markup=keyboard.return_admin_menu())

@dp.callback_query_handler(text='cancel', state='*')
async def cancel_for_admin(call: CallbackQuery, state: FSMContext):
	await state.finish()
	await call.message.edit_text(
		text='–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å <b>–≤—ã–¥–∞–Ω–∞!</b>',
		reply_markup=keyboard.admin_menu()
	)

@dp.callback_query_handler(text='mailing', state='*')
async def mailing(call: CallbackQuery, state: FSMContext):
	await call.message.edit_text(
		'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç:',
		reply_markup=keyboard.return_admin_menu()
	)
	await state.set_state(mailing_setting.message)

@dp.message_handler(state=mailing_setting.message, content_types=['any'])
async def message_chosen(message: Message, state: FSMContext):
	if message.content_type in [types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.VIDEO]:
		file = None
		type = 'text'
		if message.photo:
			file = message.photo[-1].file_id
			type = 'photo'
		elif message.video:
			file = message.video.file_id
			type = 'video'
		caption = message.html_text
		await state.update_data(file=file, type=type, caption=caption)
		await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup=keyboard.confirm_mailing_menu())
		await state.set_state(mailing_setting.confirm)
	else:
		await message.answer('–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç!', reply_markup=keyboard.return_admin_menu())

@dp.callback_query_handler(state=mailing_setting.confirm)
async def confirm_mailing(call: CallbackQuery, state: FSMContext):
	if call.data == 'confirm_mailing':
		data = await state.get_data()
		await call.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!')
		async for user in db.id_all_users():
			try:
				if data.get('type') == 'photo':
					await bot.send_photo(
						chat_id=user,
						photo=data.get('file'),
						caption=data.get('caption')
					)
				elif data.get('type') == 'video':
					await bot.send_video(
						chat_id=user,
						video=data.get('file'),
						caption=data.get('caption')
					)
				elif data.get('type') == 'text':
					await bot.send_message(
						chat_id=user,
						text=data.get('caption')
					)
			except:
				pass
		await state.finish()
	else:
		await call.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@dp.callback_query_handler(text="get_main_menu", state="*")
async def main_menu(call: CallbackQuery, state: FSMContext) -> None:
	await state.finish()
	await call.answer()
	await call.message.edit_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –≤–∞—à <b>–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üìÇ\n\n–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, <b>–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é</b> –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ üõ†\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚öô', reply_markup=keyboard.main_menu())
	
@dp.callback_query_handler(text="posts_user")
async def posts_user_handler(call: CallbackQuery, state: FSMContext):
	posts_user = await db.all_posts_user(call.from_user.id)
	if posts_user:
		await call.message.edit_text('–≠—Ç–æ –≤–∞—à–∏ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> üìÑ\n\n–°—Ç–∞—Ç—É—Å—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\nüì© - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ</b>\n‚ùå - –ü—É–±–ª–∏–∫–∞—Ü–∏—è <b>–æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n‚úÖ - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\nüïµ‚Äç‚ôÇÔ∏è - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>–≤ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>\n\n–ò—â–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é <b>–º–µ–Ω—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</b> üóí', reply_markup=keyboard.posts_user_menu(posts_user, 2))
		await state.set_state(interaction_posts.action)
	else:
		await call.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π‚ùå –ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üì®"', show_alert=True)
		
@dp.callback_query_handler(text="support")
async def support_handler(call: CallbackQuery, state: FSMContext):
	await call.message.edit_text("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ‚ùì\n\n<b><u>–ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?</u></b>\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start , –¥–∞–ª—å—à–µ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ó–∞–π–¥–∏—Ç–µ –≤ \"–û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ üè¶\", –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç, –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. \n\n‚ùóÔ∏è –í–∞–∂–Ω–æ: \n1) –ë–æ—Ç –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é/–≤–∏–¥–µ–æ. \n2) –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª –≤ —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ—Å—Ç  –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ \"–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üìë\". \n3) –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ–Ω –∏—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç! –ü–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –±–æ—Ç –≤–∞—Å –ø–æ–Ω–∏–º–∞–µ—Ç.\n\n‚ùóÔ∏è –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –≤–∞–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º ‚ùóÔ∏è", reply_markup=keyboard.support_menu())
	await state.set_state(support.action)
	
@dp.callback_query_handler(state=support.action)
async def support_action(call: CallbackQuery, state: FSMContext):
	await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à –≤–æ–ø—Ä–æ—Å</b> üßê", reply_markup=keyboard.back_menu())
	await state.set_state(support.request)
	
@dp.message_handler(content_types=["any"], state=support.request)
async def request_for_support(message: Message, state: FSMContext):
	user = await db.info_user(message.from_user.id)
	message_request = message
	await message.delete()
	if message_request.content_type == types.ContentType.TEXT:
		await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=user[3], text="–í–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–µ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–æ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ <b>—Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤</b> ‚åõÔ∏è", reply_markup=keyboard.back_menu())
		await message.bot.send_message(chat_id=config.ADMIN_ID, text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!\n\n{message_request.from_user.first_name}, ID: <code>{message_request.from_user.id}</code>: {message_request.text}", reply_markup=keyboard.supported_menu(message.from_user.id))
		
@dp.callback_query_handler(lambda call: call.data.startswith('answer_') and call.from_user.id == config.ADMIN_ID, state="*")
async def answer_for_request(call: CallbackQuery, state: FSMContext):
	await state.update_data(id=call.message.message_id)
	await state.update_data(user_id=call.data.split('_')[1])
	text = call.message.text.split('\n\n')[1]
	await call.message.edit_text(f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ <b>–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚ùì\n\n</b>{text}")
	await state.set_state(support.answer)
	
@dp.message_handler(state=support.answer)
async def sending_answer(message: Message, state: FSMContext):
	data = await state.get_data()
	await state.finish()
	await message.delete()
	await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=data.get('id'), text="–û—Ç–≤–µ—Ç –±—ã–ª <b>—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
	await message.bot.send_message(chat_id=data.get('user_id'), text=f"–û—Ç–≤–µ—Ç –Ω–∞ <b>–≤–∞—à –≤–æ–ø—Ä–æ—Å</b> üßê\n\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <i>\"{message.text}\"</i>", reply_markup=keyboard.delete_message_menu())
	
@dp.callback_query_handler(text="payment_tariff")
async def payment_tariff_handler(call: CallbackQuery, state: FSMContext):
	await call.answer('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ‚ùì" -> "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë©‚Äçüíª"', show_alert=True)
	#await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å <b>—Ç–∞—Ä–∏—Ñ</b> üí≥", reply_markup=keyboard.tariffs_menu())
	#await state.set_state(tariff.chosen_tariff)
	
@dp.callback_query_handler(state=tariff.chosen_tariff)
async def chosen_tariff_handler(call: CallbackQuery, state: FSMContext):
	info = call.data.split('_')
	price = int(info[1][8:])
	await state.update_data(info=info)
	await call.message.edit_text(f"–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã <b>{price}‚ÇΩüí∏\n\n</b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  <b>\"–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ\"</b>, –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç. –ê –ø–æ—Å–ª–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚òëÔ∏è\"</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.\n\n‚ùóÔ∏è –í—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É <b>10 –º–∏–Ω—É—Ç</b> ‚ùóÔ∏è", reply_markup=keyboard.payment_menu(
		payment.create(price, call.from_user.id)))
	await state.set_state(tariff.check_payment)
	
@dp.callback_query_handler(state=tariff.check_payment)
async def check_payment_handler(call: CallbackQuery, state: FSMContext):
	await call.answer()
	data = await state.get_data()
	if call.data.startswith("check_"):
		payment_id = call.data[6:]
		info = data.get('info')
		price = int(info[1][8:])
		check_payment = payment.check(payment_id)
		if check_payment:
			await call.message.edit_text(f"–í—ã <b>—É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏</b> —Å—á–µ—Ç ‚ùóÔ∏è\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{info[0][5:]}</b> üìÑ\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ <b>–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üè†", reply_markup=keyboard.back_menu())
			await db.change_value_posts_user(check_payment.get('chat_id'), int(info[0][5:]))
			print(f"True payment {check_payment.get('chat_id')}")
		else:
			await call.message.edit_text(f"–í—ã <b>–Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏</b> —Å—á–µ—Ç üò¢\n\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã <b>{price}‚ÇΩüí∏\n\n</b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  <b>\"–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ\"</b>, –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç. –ê –ø–æ—Å–ª–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚òëÔ∏è\"</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.\n\n‚ùóÔ∏è –í—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É <b>10 –º–∏–Ω—É—Ç</b> ‚ùóÔ∏è", reply_markup=keyboard.payment_menu(
				payment.create(price, call.from_user.id)))

@dp.callback_query_handler(state=interaction_posts.action)
async def action_menu_posts(call: CallbackQuery, state: FSMContext) -> None:
	posts_user = await db.all_posts_user(call.from_user.id)
	if call.data.startswith('post_id'):
		id = int(call.data[8:])
		for post in posts_user:
			if post[0] == id:
				post_user = post
				break
		
		text = f"–≠—Ç–æ <b>—Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>üìÉ\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{post_user[5]}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{post_user[6]}</b> ‚è∞"
		kb = keyboard.action_post_menu(post_user[7])
		if post_user[7] == "send":
			text += "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º ‚ùì"
		await call.message.delete()	
		if post_user[3] == 'photo':
			post_message = await bot.send_photo(chat_id=call.from_user.id, photo=post_user[2], caption=post_user[4])
		else:
			post_message = await bot.send_video(chat_id=call.from_user.id, video=post_user[2], caption=post_user[4])
		menu = await call.message.answer(text, reply_markup=kb)
		await state.update_data(message_id=post_message.message_id)
		await state.update_data(id=id)
		await state.set_state(interaction_posts.action_post)
		await db.change_value_menu_id_user(call.from_user.id, menu.message_id)
	elif call.data.startswith('post_next') or call.data.startswith('post_previous'):
		count = int(call.data.split('_')[3])
		index = 6*count
		if index < 0:
			await call.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥! –¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚ùå")
			return
		if not posts_user[index:]:
			await call.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢")
			return
		
		if call.data.startswith('post_previous'):
			change = 1
		else:
			change = 0
		await call.message.edit_text('–≠—Ç–æ –≤–∞—à–∏ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> üìÑ\n\n–°—Ç–∞—Ç—É—Å—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\nüì© - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ</b>\n‚ùå - –ü—É–±–ª–∏–∫–∞—Ü–∏—è <b>–æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n‚úÖ - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\nüïµ‚Äç‚ôÇÔ∏è - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>–≤ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>\n\n–ò—â–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é <b>–º–µ–Ω—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</b> üóí', reply_markup=keyboard.posts_user_menu(posts_user[index:], change))
		
@dp.callback_query_handler(state=interaction_posts.action_post)
async def action_post_handler(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	await bot.delete_message(chat_id=call.from_user.id, message_id=int(data.get('message_id')))
	id = data.get('id')
	await state.finish()
	if call.data.startswith("cancelled"):
		await db.change_status_post(id)
		await db.change_value_posts_user(call.from_user.id, 1)
		await call.message.edit_text('–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ <b>–æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç üè†', reply_markup=keyboard.back_menu())
	else:
		await call.message.edit_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –≤–∞—à <b>–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üìÇ\n\n–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, <b>–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é</b> –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ üõ†\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚öô', reply_markup=keyboard.main_menu())
		
@dp.callback_query_handler(text="new_post")
async def new_post_handler(call: CallbackQuery,state: FSMContext) -> None:
	user = await db.info_user(call.from_user.id)
	if user[2] == 0:
		await call.answer('–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! ‚ùå –ß—Ç–æ –±—ã –≤—ã–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ üè¶"', show_alert=True)
	else:
		await call.message.edit_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{user[2]}</b> üìÇ\n\n–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ üëú", reply_markup=keyboard.back_menu())
		await state.set_state(post_setting.file)
		
@dp.message_handler(content_types=["any"], state=post_setting.file)
async def file_for_post_chosen(message: Message, state: FSMContext) -> None:
	user = await db.info_user(message.from_user.id)
	data = await state.get_data()
	if message.content_type in ["photo", "video"]:
		if message.photo:
			file_id = message.photo[-1].file_id
			type = "photo"
		else:
			file_id = message.video.file_id
			type = "video"
		
		await state.update_data(file_id=file_id)
		await state.update_data(type=type)
		await message.delete()
		if data.get('post_id'):
			if data.get('type') == "photo":
				post = await bot.send_photo(chat_id=message.from_user.id, photo=file_id, caption=data.get('description'))
			else:
				post = await bot.send_video(chat_id=message.from_user.id, video=file_id, caption=data.get('description'))
			await state.update_data(post_id=post.message_id)
			await message.bot.delete_message(chat_id=message.from_user.id, message_id=user[3])
			menu_message = await message.answer(f"–°–≤–µ—Ä—Ö—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>—Ç–≤–æ–π –ø–æ—Å—Ç</b> üìã \n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{data.get('date')}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{data.get('time_post')}</b> ‚è∞\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º <b>—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º</b> ‚ùì", reply_markup=keyboard.confirm_sending_and_past_menu("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚öô"))
			await db.change_value_menu_id_user(message.from_user.id, menu_message.message_id)
			await state.set_state(post_setting.confirm_sending)
			return
		await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=user[3], text="–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–≤—ã–π —à–∞–≥ <b>–ø–æ–∑–∞–¥–∏</b> üì∑\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>, –Ω–µ –∑–∞–±—ã–≤–∞–π –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>, <i>–ø–æ–¥ –Ω–∞–∫–ª–æ–Ω–æ–º</i> –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ üòÆ‚Äçüí®", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üì∏"))
		await state.set_state(post_setting.description)
	else:
		await message.delete()
		await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=user[3], text="–ü–æ—Ö–æ–∂–µ, –≤—ã <b>–Ω–µ –ø–æ–Ω—è–ª–∏</b> üò¢\n\n–≠—Ç–æ <b>–Ω–µ —Ç–æ</b>, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ üëú", reply_markup=keyboard.back_menu())
		
@dp.callback_query_handler(state=post_setting.description)
async def past_step_file_handler(call: CallbackQuery, state: FSMContext):
	user = await db.info_user(call.from_user.id)
	if call.data == "past_step":
		await call.message.edit_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{user[2]}</b> üìÇ\n\n–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ üëú", reply_markup=keyboard.back_menu())
		await state.set_state(post_setting.file)
		
@dp.message_handler(state=post_setting.description)
async def description_chosen(message: Message, state: FSMContext) -> None:
	user = await db.info_user(message.from_user.id)
	text = message.html_text
	await state.update_data(description=text)
	data = await state.get_data()
	await message.delete()
	if data.get('post_id'):
		if data.get('type') == "photo":
			post = await bot.send_photo(chat_id=message.from_user.id, photo=data.get('file_id'), caption=data.get('description'))
		else:
			post = await bot.send_video(chat_id=message.from_user.id, video=data.get('file_id'), caption=data.get('description'))
		await state.update_data(post_id=post.message_id)
		await message.bot.delete_message(chat_id=message.from_user.id, message_id=user[3])
		menu_message = await message.answer(f"–°–≤–µ—Ä—Ö—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>—Ç–≤–æ–π –ø–æ—Å—Ç</b> üìã \n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{data.get('date')}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{data.get('time_post')}</b> ‚è∞\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º <b>—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º</b> ‚ùì", reply_markup=keyboard.confirm_sending_and_past_menu("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚öô"))
		await db.change_value_menu_id_user(message.from_user.id, menu_message.message_id)
		await state.set_state(post_setting.confirm_sending)
		return
	await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=user[3], text="–û–∫–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> üóì", reply_markup=keyboard.calendar_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é üìù"))
	await state.set_state(post_setting.date)
	
@dp.callback_query_handler(state=post_setting.date)
async def date_chosen(call: CallbackQuery, state: FSMContext) -> None:
	user = await db.info_user(call.from_user.id)
	if call.data == "past_step":
		await call.message.bot.edit_message_text(chat_id=call.from_user.id, message_id=user[3], text="–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–≤—ã–π —à–∞–≥ <b>–ø–æ–∑–∞–¥–∏</b> üì∑\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>, –Ω–µ –∑–∞–±—ã–≤–∞–π –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>, <i>–ø–æ–¥ –Ω–∞–∫–ª–æ–Ω–æ–º</i> –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ üòÆ‚Äçüí®", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üì∏"))
		await state.set_state(post_setting.description)
		return
	date = call.data.split('_')[1]
	await state.update_data(date=date)
	data = await state.get_data()
	if data.get('post_id'):
		file_id = data.get('file_id')
		if data.get('type') == "photo":
			post = await bot.send_photo(chat_id=call.from_user.id, photo=file_id, caption=data.get('description'))
		else:
			post = await bot.send_video(chat_id=call.from_user.id, video=file_id, caption=data.get('description'))
		await state.update_data(post_id=post.message_id)
		await call.message.bot.delete_message(chat_id=call.from_user.id, message_id=user[3])
		menu_message = await call.message.answer(f"–°–≤–µ—Ä—Ö—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>—Ç–≤–æ–π –ø–æ—Å—Ç</b> üìã \n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{data.get('date')}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{data.get('time_post')}</b> ‚è∞\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º <b>—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º</b> ‚ùì", reply_markup=keyboard.confirm_sending_and_past_menu("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚öô"))
		await db.change_value_menu_id_user(call.from_user.id, menu_message.message_id)
		await state.set_state(post_setting.confirm_sending)
		return
	await call.message.bot.edit_message_text(chat_id=call.from_user.id, message_id=user[3], text="–Ø –ø–æ–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> ‚è∞\n\n–í–∞–∂–Ω–æ! <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.</b>", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—Ç–µ üóì"))
	await state.set_state(post_setting.time)
	
@dp.callback_query_handler(state=post_setting.time)
async def past_step_calendar_handler(call: CallbackQuery, state: FSMContext):
	if call.data == "past_step":
		await call.message.edit_text("–û–∫–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> üóì", reply_markup=keyboard.calendar_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é üìù"))
		await state.set_state(post_setting.date)
	
@dp.message_handler(state=post_setting.time)
async def time_chosen(message: Message, state: FSMContext) -> None:
	user = await db.info_user(message.from_user.id)
	time_is_message = message.text.strip()
	await message.delete()
	try:
		time_post = datetime.strptime(time_is_message, "%H:%M").time()
		
		info = await state.get_data()
		if not time_no_past(info.get('date'), time_is_message):
			await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=user[3], text="–ù–µ–ª—å–∑—è –∑–∞–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è <b>–≤ –ø—Ä–æ—à–ª–æ–º!</b>\n\n–ï—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> ‚è∞", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—Ç–µ üóì"))
			return
		await state.update_data(time_post=time_is_message)
		await message.bot.delete_message(chat_id=message.from_user.id, message_id=user[3])
		if info.get('type') == "photo":
			post = await message.bot.send_photo(chat_id=message.from_user.id, photo=info.get('file_id'), caption=info.get('description'))
		elif info.get('type') == "video":
			post = await message.bot.send_video(chat_id=message.from_user.id, video=info.get('file_id'), caption=info.get('description'))
		await state.update_data(post_id=post.message_id)
		menu_message = await message.answer(f"–°–≤–µ—Ä—Ö—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>—Ç–≤–æ–π –ø–æ—Å—Ç</b> üìã \n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{info.get('date')}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{time_is_message}</b> ‚è∞\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º <b>—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º</b> ‚ùì", reply_markup=keyboard.confirm_sending_and_past_menu("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚öô"))
		await state.set_state(post_setting.confirm_sending)
		await db.change_value_menu_id_user(message.from_user.id, menu_message.message_id)
		return
	except ValueError:
		await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=user[3], text="–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è! <b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –ß–ß:–ú–ú</b>\n–ï—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> ‚è∞", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—Ç–µ üóì"))
		return

@dp.callback_query_handler(state=post_setting.confirm_sending)
async def confirm_sending_handler(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = await db.info_user(call.from_user.id)
	if call.data == "past_step":
		await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ <b>—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</b> üìå", reply_markup=keyboard.dops_menu())
		await state.set_state(post_setting.additionally)
	if call.data.endswith('true'):
		file_id = data.get('file_id')
		type = data.get('type')
		description = data.get('description')
		date = data.get('date')
		time_post = data.get('time_post')
		await db.add_post(call.from_user.id, file_id, type, description, date, time_post)
		await db.change_value_posts_user(call.from_user.id, -1)
		await call.answer()
		await call.message.bot.delete_message(chat_id=call.from_user.id, message_id=data.get('post_id'))
		await call.message.bot.edit_message_text(chat_id=call.from_user.id, message_id=user[3], text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ</b>üìù\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ <b>–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üè†", reply_markup=keyboard.back_menu())
		await state.finish()
		await bot.send_message(
			chat_id=config.ADMIN_ID,
			text='–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å.',
			reply_markup=keyboard.delete_message_menu()
		)
	elif call.data.endswith('delete_post'):
		data = await state.get_data()
		await call.answer()
		await call.message.bot.delete_message(chat_id=call.from_user.id, message_id=data.get('post_id'))
		await state.finish()
		await call.message.edit_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –≤–∞—à <b>–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üìÇ\n\n–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, <b>–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é</b> –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ üõ†\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚öô', reply_markup=keyboard.main_menu())
		
@dp.callback_query_handler(state=post_setting.additionally)
async def additionally_handler(call: CallbackQuery, state: FSMContext):
	info = await state.get_data()
	user = await db.info_user(call.from_user.id)
	if call.data == "back":
		await call.message.edit_text(f"–°–≤–µ—Ä—Ö—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>—Ç–≤–æ–π –ø–æ—Å—Ç</b> üìã \n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùóÔ∏è\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:<b>{info.get('date')}</b> üóì\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{info.get('time_post')}</b> ‚è∞\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º <b>—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º</b> ‚ùì", reply_markup=keyboard.confirm_sending_and_past_menu("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚öô"))
		await state.set_state(post_setting.confirm_sending)
	else:
		await call.message.bot.delete_message(chat_id=call.from_user.id, message_id=info.get('post_id'))
		if call.data.endswith('file'):
			await call.message.edit_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{user[2]}</b> üìÇ\n\n–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ üëú", reply_markup=keyboard.back_menu())
			await state.set_state(post_setting.file)
		elif call.data.endswith('text'):
			await call.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–≤—ã–π —à–∞–≥ <b>–ø–æ–∑–∞–¥–∏</b> üì∑\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>, –Ω–µ –∑–∞–±—ã–≤–∞–π –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>, <i>–ø–æ–¥ –Ω–∞–∫–ª–æ–Ω–æ–º</i> –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ üòÆ‚Äçüí®", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üì∏"))
			await state.set_state(post_setting.description)
		elif call.data.endswith('date'):
			await call.message.edit_text("–û–∫–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> üóì", reply_markup=keyboard.calendar_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é üìù"))
			await state.set_state(post_setting.date)
		elif call.data.endswith('time'):
			await call.message.edit_text("–Ø –ø–æ–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> ‚è∞", reply_markup=keyboard.back_and_past_menu("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—Ç–µ üóì"))
			await state.set_state(post_setting.time)
		
		
def time_no_past(date_str, time_str):
	date_obj = datetime.strptime(str(datetime.now().year) + date_str, "%Y%d.%m").date()
	time_obj = datetime.strptime(time_str, "%H:%M").time()
	past_datetime = datetime.combine(date_obj, time_obj)
	return past_datetime > datetime.now()
	
async def check_posts() -> None:
	while True:
		posts = await db.all_posts_sending()
		date_str = datetime.now().strftime("%d.%m")
		time_str = datetime.now().strftime("%H:%M")
		
		for post in posts:
			await sending_post(post)
		await asyncio.sleep(60)
		
async def sending_post(post: tuple):
	if post[3] == 'photo':
		await bot.send_photo(chat_id=config.USERNAME_CHANNEL, photo=post[2], caption=post[4])
	else:
		await bot.send_video(chat_id=config.USERNAME_CHANNEL, video=post[2], caption=post[4])
	await db.change_status_post(post[0], "successfully")
	
def main() -> None:
	print(datetime.now().strftime("%H:%M"))
	executor.start_polling(dp, skip_updates=True)
	
if __name__ == "__main__":
	loop = asyncio.get_event_loop()
	loop.create_task(db.create_table_users())
	loop.create_task(db.create_table_posts())
	loop.create_task(check_posts())
	main()